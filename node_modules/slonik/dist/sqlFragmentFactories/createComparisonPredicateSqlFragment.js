"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utilities = require("../utilities");

var _factories = require("../factories");

var _errors = require("../errors");

const createComparisonPredicateSqlFragment = (token, greatestParameterPosition) => {
  if (token.operator !== '<' && token.operator !== '>' && token.operator !== '<=' && token.operator !== '>=' && token.operator !== '=' && token.operator !== '<>' && token.operator !== '!=') {
    throw new _errors.UnexpectedStateError('Invalid operator.');
  }

  const values = [];
  const placeholders = [];
  let placeholderIndex = greatestParameterPosition;

  if ((0, _utilities.isSqlToken)(token.leftOperand)) {
    // $FlowFixMe
    const sqlFragment = (0, _factories.createSqlTokenSqlFragment)(token.leftOperand, placeholderIndex);
    placeholders.push(sqlFragment.sql);
    placeholderIndex += sqlFragment.values.length;
    values.push(...sqlFragment.values);
  } else {
    placeholders.push('$' + ++placeholderIndex); // $FlowFixMe

    values.push(token.leftOperand);
  }

  placeholders.push(token.operator);

  if ((0, _utilities.isSqlToken)(token.rightOperand)) {
    // $FlowFixMe
    const sqlFragment = (0, _factories.createSqlTokenSqlFragment)(token.rightOperand, placeholderIndex);
    placeholders.push(sqlFragment.sql);
    placeholderIndex += sqlFragment.values.length;
    values.push(...sqlFragment.values);
  } else {
    placeholders.push('$' + ++placeholderIndex); // $FlowFixMe

    values.push(token.rightOperand);
  }

  return {
    sql: placeholders.join(' '),
    values
  };
};

var _default = createComparisonPredicateSqlFragment;
exports.default = _default;
//# sourceMappingURL=createComparisonPredicateSqlFragment.js.map