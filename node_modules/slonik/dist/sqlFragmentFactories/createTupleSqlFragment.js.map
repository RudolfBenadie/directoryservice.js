{"version":3,"sources":["../../src/sqlFragmentFactories/createTupleSqlFragment.js"],"names":["token","greatestParameterPosition","values","placeholders","placeholderIndex","length","UnexpectedStateError","tupleValue","sqlFragment","push","sql","join"],"mappings":";;;;;;;AAMA;;AAGA;;AAGA;;gCAKgBA,K,EAA0BC,yB,KAAuD;AAC/F,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,YAAY,GAAG,EAArB;AAEA,MAAIC,gBAAgB,GAAGH,yBAAvB;;AAEA,MAAID,KAAK,CAACE,MAAN,CAAaG,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,UAAM,IAAIC,4BAAJ,CAAyB,oCAAzB,CAAN;AACD;;AAED,OAAK,MAAMC,UAAX,IAAyBP,KAAK,CAACE,MAA/B,EAAuC;AACrC,QAAI,2BAAWK,UAAX,CAAJ,EAA4B;AAC1B;AACA,YAAMC,WAAW,GAAG,0CAA0BD,UAA1B,EAAsCH,gBAAtC,CAApB;AAEAD,MAAAA,YAAY,CAACM,IAAb,CAAkBD,WAAW,CAACE,GAA9B;AACAN,MAAAA,gBAAgB,IAAII,WAAW,CAACN,MAAZ,CAAmBG,MAAvC;AACAH,MAAAA,MAAM,CAACO,IAAP,CAAY,GAAGD,WAAW,CAACN,MAA3B;AACD,KAPD,MAOO;AACLC,MAAAA,YAAY,CAACM,IAAb,CAAkB,MAAM,EAAEL,gBAA1B;AAEAF,MAAAA,MAAM,CAACO,IAAP,CAAYF,UAAZ;AACD;AACF;;AAED,QAAMG,GAAG,GAAG,MAAMP,YAAY,CAACQ,IAAb,CAAkB,IAAlB,CAAN,GAAgC,GAA5C;AAEA,SAAO;AACLD,IAAAA,GADK;AAELR,IAAAA,MAAM,EAAE,gDAAgCA,MAAhC;AAFH,GAAP;AAID,C","sourcesContent":["// @flow\n\nimport type {\n  SqlFragmentType,\n  TupleSqlTokenType\n} from '../types';\nimport {\n  UnexpectedStateError\n} from '../errors';\nimport {\n  isSqlToken\n} from '../utilities';\nimport {\n  createPrimitiveValueExpressions,\n  createSqlTokenSqlFragment\n} from '../factories';\n\nexport default (token: TupleSqlTokenType, greatestParameterPosition: number): SqlFragmentType => {\n  const values = [];\n  const placeholders = [];\n\n  let placeholderIndex = greatestParameterPosition;\n\n  if (token.values.length === 0) {\n    throw new UnexpectedStateError('Tuple must have at least 1 member.');\n  }\n\n  for (const tupleValue of token.values) {\n    if (isSqlToken(tupleValue)) {\n      // $FlowFixMe\n      const sqlFragment = createSqlTokenSqlFragment(tupleValue, placeholderIndex);\n\n      placeholders.push(sqlFragment.sql);\n      placeholderIndex += sqlFragment.values.length;\n      values.push(...sqlFragment.values);\n    } else {\n      placeholders.push('$' + ++placeholderIndex);\n\n      values.push(tupleValue);\n    }\n  }\n\n  const sql = '(' + placeholders.join(', ') + ')';\n\n  return {\n    sql,\n    values: createPrimitiveValueExpressions(values)\n  };\n};\n"],"file":"createTupleSqlFragment.js"}