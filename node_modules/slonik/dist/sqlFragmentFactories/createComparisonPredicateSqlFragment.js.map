{"version":3,"sources":["../../src/sqlFragmentFactories/createComparisonPredicateSqlFragment.js"],"names":["token","greatestParameterPosition","operator","UnexpectedStateError","values","placeholders","placeholderIndex","leftOperand","sqlFragment","push","sql","length","rightOperand","join"],"mappings":";;;;;;;AAMA;;AAGA;;AAGA;;8CAMgBA,K,EAAqCC,yB,KAAuD;AAC1G,MACED,KAAK,CAACE,QAAN,KAAmB,GAAnB,IACAF,KAAK,CAACE,QAAN,KAAmB,GADnB,IAEAF,KAAK,CAACE,QAAN,KAAmB,IAFnB,IAGAF,KAAK,CAACE,QAAN,KAAmB,IAHnB,IAIAF,KAAK,CAACE,QAAN,KAAmB,GAJnB,IAKAF,KAAK,CAACE,QAAN,KAAmB,IALnB,IAMAF,KAAK,CAACE,QAAN,KAAmB,IAPrB,EAQE;AACA,UAAM,IAAIC,4BAAJ,CAAyB,mBAAzB,CAAN;AACD;;AAED,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,YAAY,GAAG,EAArB;AAEA,MAAIC,gBAAgB,GAAGL,yBAAvB;;AAEA,MAAI,2BAAWD,KAAK,CAACO,WAAjB,CAAJ,EAAmC;AACjC;AACA,UAAMC,WAAW,GAAG,0CAA0BR,KAAK,CAACO,WAAhC,EAA6CD,gBAA7C,CAApB;AAEAD,IAAAA,YAAY,CAACI,IAAb,CAAkBD,WAAW,CAACE,GAA9B;AACAJ,IAAAA,gBAAgB,IAAIE,WAAW,CAACJ,MAAZ,CAAmBO,MAAvC;AAEAP,IAAAA,MAAM,CAACK,IAAP,CAAY,GAAGD,WAAW,CAACJ,MAA3B;AACD,GARD,MAQO;AACLC,IAAAA,YAAY,CAACI,IAAb,CAAkB,MAAM,EAAEH,gBAA1B,EADK,CAGL;;AACAF,IAAAA,MAAM,CAACK,IAAP,CAAYT,KAAK,CAACO,WAAlB;AACD;;AAEDF,EAAAA,YAAY,CAACI,IAAb,CAAkBT,KAAK,CAACE,QAAxB;;AAEA,MAAI,2BAAWF,KAAK,CAACY,YAAjB,CAAJ,EAAoC;AAClC;AACA,UAAMJ,WAAW,GAAG,0CAA0BR,KAAK,CAACY,YAAhC,EAA8CN,gBAA9C,CAApB;AAEAD,IAAAA,YAAY,CAACI,IAAb,CAAkBD,WAAW,CAACE,GAA9B;AACAJ,IAAAA,gBAAgB,IAAIE,WAAW,CAACJ,MAAZ,CAAmBO,MAAvC;AAEAP,IAAAA,MAAM,CAACK,IAAP,CAAY,GAAGD,WAAW,CAACJ,MAA3B;AACD,GARD,MAQO;AACLC,IAAAA,YAAY,CAACI,IAAb,CAAkB,MAAM,EAAEH,gBAA1B,EADK,CAGL;;AACAF,IAAAA,MAAM,CAACK,IAAP,CAAYT,KAAK,CAACY,YAAlB;AACD;;AAED,SAAO;AACLF,IAAAA,GAAG,EAAEL,YAAY,CAACQ,IAAb,CAAkB,GAAlB,CADA;AAELT,IAAAA;AAFK,GAAP;AAID,C","sourcesContent":["// @flow\n\nimport type {\n  ComparisonPredicateTokenType,\n  SqlFragmentType\n} from '../types';\nimport {\n  isSqlToken\n} from '../utilities';\nimport {\n  createSqlTokenSqlFragment\n} from '../factories';\nimport {\n  UnexpectedStateError\n} from '../errors';\n\nexport type ComparisonOperatorType = '<' | '>' | '<=' | '>=' | '=' | '<>' | '!=';\n\nexport default (token: ComparisonPredicateTokenType, greatestParameterPosition: number): SqlFragmentType => {\n  if (\n    token.operator !== '<' &&\n    token.operator !== '>' &&\n    token.operator !== '<=' &&\n    token.operator !== '>=' &&\n    token.operator !== '=' &&\n    token.operator !== '<>' &&\n    token.operator !== '!='\n  ) {\n    throw new UnexpectedStateError('Invalid operator.');\n  }\n\n  const values = [];\n  const placeholders = [];\n\n  let placeholderIndex = greatestParameterPosition;\n\n  if (isSqlToken(token.leftOperand)) {\n    // $FlowFixMe\n    const sqlFragment = createSqlTokenSqlFragment(token.leftOperand, placeholderIndex);\n\n    placeholders.push(sqlFragment.sql);\n    placeholderIndex += sqlFragment.values.length;\n\n    values.push(...sqlFragment.values);\n  } else {\n    placeholders.push('$' + ++placeholderIndex);\n\n    // $FlowFixMe\n    values.push(token.leftOperand);\n  }\n\n  placeholders.push(token.operator);\n\n  if (isSqlToken(token.rightOperand)) {\n    // $FlowFixMe\n    const sqlFragment = createSqlTokenSqlFragment(token.rightOperand, placeholderIndex);\n\n    placeholders.push(sqlFragment.sql);\n    placeholderIndex += sqlFragment.values.length;\n\n    values.push(...sqlFragment.values);\n  } else {\n    placeholders.push('$' + ++placeholderIndex);\n\n    // $FlowFixMe\n    values.push(token.rightOperand);\n  }\n\n  return {\n    sql: placeholders.join(' '),\n    values\n  };\n};\n"],"file":"createComparisonPredicateSqlFragment.js"}