{"version":3,"sources":["../../src/sqlFragmentFactories/createTupleListSqlFragment.js"],"names":["token","greatestParameterPosition","values","placeholderIndex","tupleListMemberSql","lastTupleSize","tuple","tuples","placeholders","length","UnexpectedStateError","member","sqlFragment","push","sql","join"],"mappings":";;;;;;;AAMA;;AAGA;;AAGA;;oCAKgBA,K,EAA8BC,yB,KAAuD;AACnG,QAAMC,MAAM,GAAG,EAAf;AAEA,MAAIC,gBAAgB,GAAGF,yBAAvB;AAEA,QAAMG,kBAAkB,GAAG,EAA3B;AAEA,MAAIC,aAAJ;;AAEA,OAAK,MAAMC,KAAX,IAAoBN,KAAK,CAACO,MAA1B,EAAkC;AAChC,UAAMC,YAAY,GAAG,EAArB;;AAEA,QAAIF,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtB,YAAM,IAAIC,4BAAJ,CAAyB,oCAAzB,CAAN;AACD;;AAED,QAAI,OAAOL,aAAP,KAAyB,QAAzB,IAAqCA,aAAa,KAAKC,KAAK,CAACG,MAAjE,EAAyE;AACvE,YAAM,IAAIC,4BAAJ,CAAyB,sEAAzB,CAAN;AACD;;AAEDL,IAAAA,aAAa,GAAGC,KAAK,CAACG,MAAtB;;AAEA,SAAK,MAAME,MAAX,IAAqBL,KAArB,EAA4B;AAC1B,UAAI,2BAAWK,MAAX,CAAJ,EAAwB;AACtB;AACA,cAAMC,WAAW,GAAG,0CAA0BD,MAA1B,EAAkCR,gBAAlC,CAApB;AAEAK,QAAAA,YAAY,CAACK,IAAb,CAAkBD,WAAW,CAACE,GAA9B;AACAX,QAAAA,gBAAgB,IAAIS,WAAW,CAACV,MAAZ,CAAmBO,MAAvC;AACAP,QAAAA,MAAM,CAACW,IAAP,CAAY,GAAGD,WAAW,CAACV,MAA3B;AACD,OAPD,MAOO;AACLM,QAAAA,YAAY,CAACK,IAAb,CAAkB,MAAM,EAAEV,gBAA1B;AAEAD,QAAAA,MAAM,CAACW,IAAP,CAAYF,MAAZ;AACD;AACF;;AAEDP,IAAAA,kBAAkB,CAACS,IAAnB,CAAwB,MAAML,YAAY,CAACO,IAAb,CAAkB,IAAlB,CAAN,GAAgC,GAAxD;AACD;;AAED,QAAMD,GAAG,GAAGV,kBAAkB,CAACW,IAAnB,CAAwB,IAAxB,CAAZ;AAEA,SAAO;AACLD,IAAAA,GADK;AAELZ,IAAAA,MAAM,EAAE,gDAAgCA,MAAhC;AAFH,GAAP;AAID,C","sourcesContent":["// @flow\n\nimport type {\n  SqlFragmentType,\n  TupleListSqlTokenType\n} from '../types';\nimport {\n  UnexpectedStateError\n} from '../errors';\nimport {\n  isSqlToken\n} from '../utilities';\nimport {\n  createPrimitiveValueExpressions,\n  createSqlTokenSqlFragment\n} from '../factories';\n\nexport default (token: TupleListSqlTokenType, greatestParameterPosition: number): SqlFragmentType => {\n  const values = [];\n\n  let placeholderIndex = greatestParameterPosition;\n\n  const tupleListMemberSql = [];\n\n  let lastTupleSize;\n\n  for (const tuple of token.tuples) {\n    const placeholders = [];\n\n    if (tuple.length === 0) {\n      throw new UnexpectedStateError('Tuple must have at least 1 member.');\n    }\n\n    if (typeof lastTupleSize === 'number' && lastTupleSize !== tuple.length) {\n      throw new UnexpectedStateError('Each tuple in a list of tuples must have an equal number of members.');\n    }\n\n    lastTupleSize = tuple.length;\n\n    for (const member of tuple) {\n      if (isSqlToken(member)) {\n        // $FlowFixMe\n        const sqlFragment = createSqlTokenSqlFragment(member, placeholderIndex);\n\n        placeholders.push(sqlFragment.sql);\n        placeholderIndex += sqlFragment.values.length;\n        values.push(...sqlFragment.values);\n      } else {\n        placeholders.push('$' + ++placeholderIndex);\n\n        values.push(member);\n      }\n    }\n\n    tupleListMemberSql.push('(' + placeholders.join(', ') + ')');\n  }\n\n  const sql = tupleListMemberSql.join(', ');\n\n  return {\n    sql,\n    values: createPrimitiveValueExpressions(values)\n  };\n};\n"],"file":"createTupleListSqlFragment.js"}