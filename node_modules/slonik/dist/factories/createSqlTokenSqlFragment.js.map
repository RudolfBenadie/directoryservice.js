{"version":3,"sources":["../../src/factories/createSqlTokenSqlFragment.js"],"names":["token","greatestParameterPosition","type","SqlTokenSymbol","RawSqlTokenSymbol","IdentifierTokenSymbol","IdentifierListTokenSymbol","ArrayTokenSymbol","ValueListTokenSymbol","TupleTokenSymbol","TupleListTokenSymbol","UnnestTokenSymbol","ComparisonPredicateTokenSymbol","BooleanExpressionTokenSymbol","AssignmentListTokenSymbol","UnexpectedStateError"],"mappings":";;;;;;;AAEA;;AAcA;;AAcA;;mCAQgBA,K,EAAqBC,yB,KAAuD;AAC1F,MAAID,KAAK,CAACE,IAAN,KAAeC,uBAAnB,EAAmC;AACjC;AACA;AACA,WAAO,gDAAqBH,KAArB,EAA4BC,yBAA5B,CAAP;AACD,GAJD,MAIO,IAAID,KAAK,CAACE,IAAN,KAAeE,0BAAnB,EAAsC;AAC3C;AACA,WAAO,mDAAwBJ,KAAxB,EAA+BC,yBAA/B,CAAP;AACD,GAHM,MAGA,IAAID,KAAK,CAACE,IAAN,KAAeG,8BAAnB,EAA0C;AAC/C;AACA,WAAO,uDAA4BL,KAA5B,CAAP;AACD,GAHM,MAGA,IAAIA,KAAK,CAACE,IAAN,KAAeI,kCAAnB,EAA8C;AACnD;AACA,WAAO,2DAAgCN,KAAhC,CAAP;AACD,GAHM,MAGA,IAAIA,KAAK,CAACE,IAAN,KAAeK,yBAAnB,EAAqC;AAC1C;AACA,WAAO,kDAAuBP,KAAvB,EAA8BC,yBAA9B,CAAP;AACD,GAHM,MAGA,IAAID,KAAK,CAACE,IAAN,KAAeM,6BAAnB,EAAyC;AAC9C;AACA,WAAO,sDAA2BR,KAA3B,EAAkCC,yBAAlC,CAAP;AACD,GAHM,MAGA,IAAID,KAAK,CAACE,IAAN,KAAeO,yBAAnB,EAAqC;AAC1C;AACA,WAAO,kDAAuBT,KAAvB,EAA8BC,yBAA9B,CAAP;AACD,GAHM,MAGA,IAAID,KAAK,CAACE,IAAN,KAAeQ,6BAAnB,EAAyC;AAC9C;AACA,WAAO,sDAA2BV,KAA3B,EAAkCC,yBAAlC,CAAP;AACD,GAHM,MAGA,IAAID,KAAK,CAACE,IAAN,KAAeS,0BAAnB,EAAsC;AAC3C;AACA,WAAO,mDAAwBX,KAAxB,EAA+BC,yBAA/B,CAAP;AACD,GAHM,MAGA,IAAID,KAAK,CAACE,IAAN,KAAeU,uCAAnB,EAAmD;AACxD;AACA,WAAO,gEAAqCZ,KAArC,EAA4CC,yBAA5C,CAAP;AACD,GAHM,MAGA,IAAID,KAAK,CAACE,IAAN,KAAeW,qCAAnB,EAAiD;AACtD;AACA,WAAO,8DAAmCb,KAAnC,EAA0CC,yBAA1C,CAAP;AACD,GAHM,MAGA,IAAID,KAAK,CAACE,IAAN,KAAeY,kCAAnB,EAA8C;AACnD;AACA,WAAO,2DAAgCd,KAAhC,EAAuCC,yBAAvC,CAAP;AACD;;AAED,QAAM,IAAIc,4BAAJ,EAAN;AACD,C","sourcesContent":["// @flow\n\nimport {\n  ArrayTokenSymbol,\n  AssignmentListTokenSymbol,\n  BooleanExpressionTokenSymbol,\n  ComparisonPredicateTokenSymbol,\n  IdentifierListTokenSymbol,\n  IdentifierTokenSymbol,\n  RawSqlTokenSymbol,\n  SqlTokenSymbol,\n  TupleListTokenSymbol,\n  TupleTokenSymbol,\n  UnnestTokenSymbol,\n  ValueListTokenSymbol\n} from '../symbols';\nimport {\n  createArraySqlFragment,\n  createAssignmentListSqlFragment,\n  createBooleanExpressionSqlFragment,\n  createComparisonPredicateSqlFragment,\n  createIdentifierSqlFragment,\n  createIdentifierListSqlFragment,\n  createRawSqlSqlFragment,\n  createSqlSqlFragment,\n  createTupleListSqlFragment,\n  createTupleSqlFragment,\n  createUnnestSqlFragment,\n  createValueListSqlFragment\n} from '../sqlFragmentFactories';\nimport {\n  UnexpectedStateError\n} from '../errors';\nimport type {\n  SqlTokenType,\n  SqlFragmentType\n} from '../types';\n\nexport default (token: SqlTokenType, greatestParameterPosition: number): SqlFragmentType => {\n  if (token.type === SqlTokenSymbol) {\n    // @see https://github.com/gajus/slonik/issues/36 regarding FlowFixMe use.\n    // $FlowFixMe\n    return createSqlSqlFragment(token, greatestParameterPosition);\n  } else if (token.type === RawSqlTokenSymbol) {\n    // $FlowFixMe\n    return createRawSqlSqlFragment(token, greatestParameterPosition);\n  } else if (token.type === IdentifierTokenSymbol) {\n    // $FlowFixMe\n    return createIdentifierSqlFragment(token);\n  } else if (token.type === IdentifierListTokenSymbol) {\n    // $FlowFixMe\n    return createIdentifierListSqlFragment(token);\n  } else if (token.type === ArrayTokenSymbol) {\n    // $FlowFixMe\n    return createArraySqlFragment(token, greatestParameterPosition);\n  } else if (token.type === ValueListTokenSymbol) {\n    // $FlowFixMe\n    return createValueListSqlFragment(token, greatestParameterPosition);\n  } else if (token.type === TupleTokenSymbol) {\n    // $FlowFixMe\n    return createTupleSqlFragment(token, greatestParameterPosition);\n  } else if (token.type === TupleListTokenSymbol) {\n    // $FlowFixMe\n    return createTupleListSqlFragment(token, greatestParameterPosition);\n  } else if (token.type === UnnestTokenSymbol) {\n    // $FlowFixMe\n    return createUnnestSqlFragment(token, greatestParameterPosition);\n  } else if (token.type === ComparisonPredicateTokenSymbol) {\n    // $FlowFixMe\n    return createComparisonPredicateSqlFragment(token, greatestParameterPosition);\n  } else if (token.type === BooleanExpressionTokenSymbol) {\n    // $FlowFixMe\n    return createBooleanExpressionSqlFragment(token, greatestParameterPosition);\n  } else if (token.type === AssignmentListTokenSymbol) {\n    // $FlowFixMe\n    return createAssignmentListSqlFragment(token, greatestParameterPosition);\n  }\n\n  throw new UnexpectedStateError();\n};\n"],"file":"createSqlTokenSqlFragment.js"}