"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _symbols = require("../symbols");

var _sqlFragmentFactories = require("../sqlFragmentFactories");

var _errors = require("../errors");

const createSqlTokenSqlFragment = (token, greatestParameterPosition) => {
  if (token.type === _symbols.SqlTokenSymbol) {
    // @see https://github.com/gajus/slonik/issues/36 regarding FlowFixMe use.
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createSqlSqlFragment)(token, greatestParameterPosition);
  } else if (token.type === _symbols.RawSqlTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createRawSqlSqlFragment)(token, greatestParameterPosition);
  } else if (token.type === _symbols.IdentifierTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createIdentifierSqlFragment)(token);
  } else if (token.type === _symbols.IdentifierListTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createIdentifierListSqlFragment)(token);
  } else if (token.type === _symbols.ArrayTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createArraySqlFragment)(token, greatestParameterPosition);
  } else if (token.type === _symbols.ValueListTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createValueListSqlFragment)(token, greatestParameterPosition);
  } else if (token.type === _symbols.TupleTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createTupleSqlFragment)(token, greatestParameterPosition);
  } else if (token.type === _symbols.TupleListTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createTupleListSqlFragment)(token, greatestParameterPosition);
  } else if (token.type === _symbols.UnnestTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createUnnestSqlFragment)(token, greatestParameterPosition);
  } else if (token.type === _symbols.ComparisonPredicateTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createComparisonPredicateSqlFragment)(token, greatestParameterPosition);
  } else if (token.type === _symbols.BooleanExpressionTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createBooleanExpressionSqlFragment)(token, greatestParameterPosition);
  } else if (token.type === _symbols.AssignmentListTokenSymbol) {
    // $FlowFixMe
    return (0, _sqlFragmentFactories.createAssignmentListSqlFragment)(token, greatestParameterPosition);
  }

  throw new _errors.UnexpectedStateError();
};

var _default = createSqlTokenSqlFragment;
exports.default = _default;
//# sourceMappingURL=createSqlTokenSqlFragment.js.map