{"version":3,"sources":["../../src/utilities/interpolatePositionalParameterReferences.js"],"names":["inputSql","inputValues","greatestParameterPosition","resultValues","bindingNames","match","map","parseInt","slice","sort","length","UnexpectedStateError","resultSql","replace","g1","parameterPosition","boundValue","sqlFragment","push","values","sql"],"mappings":";;;;;;;AAEA;;AAMA;;AAGA;;;;AAEA;;;kDAIEA,Q,EACAC,WAA0C,GAAG,E,EAC7CC,yB,KACG;AACH,QAAMC,YAAY,GAAG,EAArB;AAEA,QAAMC,YAAY,GAAG,CAACJ,QAAQ,CAACK,KAAT,CAAe,UAAf,KAA8B,EAA/B,EAClBC,GADkB,CACbD,KAAD,IAAW;AACd,WAAOE,QAAQ,CAACF,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAD,EAAiB,EAAjB,CAAf;AACD,GAHkB,EAIlBC,IAJkB,EAArB;;AAMA,MAAIL,YAAY,CAACA,YAAY,CAACM,MAAb,GAAsB,CAAvB,CAAZ,GAAwCT,WAAW,CAACS,MAAxD,EAAgE;AAC9D,UAAM,IAAIC,4BAAJ,CAAyB,iFAAzB,CAAN;AACD;;AAED,MAAIP,YAAY,CAACM,MAAb,GAAsB,CAAtB,IAA2BN,YAAY,CAAC,CAAD,CAAZ,KAAoB,CAAnD,EAAsD;AACpD,UAAM,IAAIO,4BAAJ,CAAyB,qCAAzB,CAAN;AACD;;AAED,QAAMC,SAAS,GAAGZ,QAAQ,CAACa,OAAT,CAAiB,UAAjB,EAA6B,CAACR,KAAD,EAAQS,EAAR,KAAe;AAC5D,UAAMC,iBAAiB,GAAGR,QAAQ,CAACO,EAAD,EAAK,EAAL,CAAlC;AACA,UAAME,UAAU,GAAGf,WAAW,CAACc,iBAAiB,GAAG,CAArB,CAA9B;;AAEA,QAAI,yBAAWC,UAAX,CAAJ,EAA4B;AAC1B;AACA,YAAMC,WAAW,GAAG,0CAA0BD,UAA1B,EAAsCb,YAAY,CAACO,MAAb,GAAsBR,yBAA5D,CAApB;AAEAC,MAAAA,YAAY,CAACe,IAAb,CAAkB,GAAGD,WAAW,CAACE,MAAjC;AAEA,aAAOF,WAAW,CAACG,GAAnB;AACD,KAPD,MAOO;AACLjB,MAAAA,YAAY,CAACe,IAAb,CAAkBjB,WAAW,CAACc,iBAAiB,GAAG,CAArB,CAA7B;AAEA,aAAO,OAAOZ,YAAY,CAACO,MAAb,GAAsBR,yBAA7B,CAAP;AACD;AACF,GAhBiB,CAAlB;AAkBA,SAAO;AACLkB,IAAAA,GAAG,EAAER,SADA;AAELO,IAAAA,MAAM,EAAEhB;AAFH,GAAP;AAID,C","sourcesContent":["// @flow\n\nimport {\n  UnexpectedStateError\n} from '../errors';\nimport type {\n  PositionalParameterValuesType\n} from '../types';\nimport {\n  createSqlTokenSqlFragment\n} from '../factories';\nimport isSqlToken from './isSqlToken';\n\n/**\n * @see https://github.com/mysqljs/sqlstring/blob/f946198800a8d7f198fcf98d8bb80620595d01ec/lib/SqlString.js#L73\n */\nexport default (\n  inputSql: string,\n  inputValues: PositionalParameterValuesType = [],\n  greatestParameterPosition: number\n) => {\n  const resultValues = [];\n\n  const bindingNames = (inputSql.match(/\\$(\\d+)/g) || [])\n    .map((match) => {\n      return parseInt(match.slice(1), 10);\n    })\n    .sort();\n\n  if (bindingNames[bindingNames.length - 1] > inputValues.length) {\n    throw new UnexpectedStateError('The greatest parameter position is greater than the number of parameter values.');\n  }\n\n  if (bindingNames.length > 0 && bindingNames[0] !== 1) {\n    throw new UnexpectedStateError('Parameter position must start at 1.');\n  }\n\n  const resultSql = inputSql.replace(/\\$(\\d+)/g, (match, g1) => {\n    const parameterPosition = parseInt(g1, 10);\n    const boundValue = inputValues[parameterPosition - 1];\n\n    if (isSqlToken(boundValue)) {\n      // $FlowFixMe\n      const sqlFragment = createSqlTokenSqlFragment(boundValue, resultValues.length + greatestParameterPosition);\n\n      resultValues.push(...sqlFragment.values);\n\n      return sqlFragment.sql;\n    } else {\n      resultValues.push(inputValues[parameterPosition - 1]);\n\n      return '$' + (resultValues.length + greatestParameterPosition);\n    }\n  });\n\n  return {\n    sql: resultSql,\n    values: resultValues\n  };\n};\n"],"file":"interpolatePositionalParameterReferences.js"}