{"version":3,"sources":["../../src/utilities/interpolateNamedParameterReferences.js"],"names":["log","Logger","child","namespace","namedPlaceholderRegex","inputSql","inputValues","greatestParameterPosition","resultValues","parameterNames","Object","keys","parameterName","parameterValue","push","usedParamterNames","resultSql","replace","match","g1","includes","UnexpectedStateError","parameterIndex","indexOf","slice","length","unusedParameterNames","warn"],"mappings":";;;;;;;AAEA;;AAGA;;AACA;;AAMA;;;;AAEA,MAAMA,GAAG,GAAGC,gBAAOC,KAAP,CAAa;AACvBC,EAAAA,SAAS,EAAE;AADY,CAAb,CAAZ;AAIA;;;;;AAGA,MAAMC,qBAAqB,GAAG,mBAA9B;AAEA;;;;6CAIEC,Q,EACAC,WAAqC,GAAG,E,EACxCC,yB,KACG;AACH,QAAMC,YAAY,GAAG,EAArB;AACA,QAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYL,WAAZ,CAAvB;;AAEA,OAAK,MAAMM,aAAX,IAA4BH,cAA5B,EAA4C;AAC1C,UAAMI,cAAc,GAAGP,WAAW,CAACM,aAAD,CAAlC;AAEAJ,IAAAA,YAAY,CAACM,IAAb,CAAkBD,cAAlB;AACD;;AAED,QAAME,iBAAiB,GAAG,EAA1B;AAEA,QAAMC,SAAS,GAAGX,QAAQ,CAACY,OAAT,CAAiBb,qBAAjB,EAAwC,CAACc,KAAD,EAAQC,EAAR,KAAe;AACvE,QAAI,CAACV,cAAc,CAACW,QAAf,CAAwBD,EAAxB,CAAL,EAAkC;AAChC,YAAM,IAAIE,4BAAJ,CAAyB,2DAAzB,CAAN;AACD;;AAEDN,IAAAA,iBAAiB,CAACD,IAAlB,CAAuBK,EAAvB;AAEA,UAAMG,cAAc,GAAGb,cAAc,CAACc,OAAf,CAAuBJ,EAAvB,IAA6B,CAApD;AAEA,WAAOD,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAe,CAACL,EAAE,CAACM,MAAJ,GAAa,CAA5B,IAAiC,GAAjC,GAAuCH,cAA9C;AACD,GAViB,CAAlB;AAYA,QAAMI,oBAAoB,GAAG,wBAAWjB,cAAX,EAA2BM,iBAA3B,CAA7B;;AAEA,MAAIW,oBAAoB,CAACD,MAArB,GAA8B,CAAlC,EAAqC;AACnCzB,IAAAA,GAAG,CAAC2B,IAAJ,CAAS;AACPD,MAAAA;AADO,KAAT,EAEG,wBAFH;AAIA,UAAM,IAAIL,4BAAJ,CAAyB,yFAAzB,CAAN;AACD;;AAED,SAAO,uDAAyCL,SAAzC,EAAoDR,YAApD,EAAkED,yBAAlE,CAAP;AACD,C","sourcesContent":["// @flow\n\nimport {\n  difference\n} from 'lodash';\nimport Logger from '../Logger';\nimport {\n  UnexpectedStateError\n} from '../errors';\nimport type {\n  NamedParameterValuesType\n} from '../types';\nimport interpolatePositionalParameterReferences from './interpolatePositionalParameterReferences';\n\nconst log = Logger.child({\n  namespace: 'interpolateNamedParameterReferences'\n});\n\n/**\n * @see https://regex101.com/r/KrEe8i/2\n */\nconst namedPlaceholderRegex = /[\\s,(]:([a-z_]+)/g;\n\n/**\n * @see https://github.com/mysqljs/sqlstring/blob/f946198800a8d7f198fcf98d8bb80620595d01ec/lib/SqlString.js#L73\n */\nexport default (\n  inputSql: string,\n  inputValues: NamedParameterValuesType = {},\n  greatestParameterPosition: number\n) => {\n  const resultValues = [];\n  const parameterNames = Object.keys(inputValues);\n\n  for (const parameterName of parameterNames) {\n    const parameterValue = inputValues[parameterName];\n\n    resultValues.push(parameterValue);\n  }\n\n  const usedParamterNames = [];\n\n  const resultSql = inputSql.replace(namedPlaceholderRegex, (match, g1) => {\n    if (!parameterNames.includes(g1)) {\n      throw new UnexpectedStateError('Named parameter reference does not have a matching value.');\n    }\n\n    usedParamterNames.push(g1);\n\n    const parameterIndex = parameterNames.indexOf(g1) + 1;\n\n    return match.slice(0, -g1.length - 1) + '$' + parameterIndex;\n  });\n\n  const unusedParameterNames = difference(parameterNames, usedParamterNames);\n\n  if (unusedParameterNames.length > 0) {\n    log.warn({\n      unusedParameterNames\n    }, 'unused parameter names');\n\n    throw new UnexpectedStateError('Values object contains value(s) not present as named parameter references in the query.');\n  }\n\n  return interpolatePositionalParameterReferences(resultSql, resultValues, greatestParameterPosition);\n};\n"],"file":"interpolateNamedParameterReferences.js"}